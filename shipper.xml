<!DOCTYPE refentry PUBLIC 
   "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "docbook/docbookx.dtd">
<refentry id='shipper.1'>
<refmeta>
<refentrytitle>shipper</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='source'>shipper</refmiscinfo>
<refmiscinfo class='manual'>Development Tools</refmiscinfo>
<refmiscinfo class='date'>Oct 17 2010</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname> shipper</refname>
<refpurpose>automated shipping of project releases</refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>

<cmdsynopsis>
  <command>shipper</command>  
  <arg choice='opt'>-n</arg>
  <arg choice='opt'>-v</arg>
  <arg choice='opt'>-w</arg>
  <arg choice='opt'>-x <replaceable>destinations</replaceable></arg>
  <arg choice='opt' rep='repeat'><replaceable>var</replaceable>=<replaceable>val</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para><application>shipper</application> is a tool for shipping
project releases.  Its job is to make it possible for you to run the
command <command>shipper | sh</command> in the top-level directory of a
project and have a release be properly exported to all the places that
you normally deliver it &mdash; your personal website, Linux source
code archive sites, distribution submission queues; also, to send
appropriate notfications to freecode.net, mailing lists, and project
IRC channels.</para>

<para>A second goal is to arrange your shipping process in such a
way that metadata like your project version only have to be kept in
one place and modified once per release. The overall goal is to reduce
the friction cost of shipping releases to as near zero as
possible.</para>

<para>As much as possible, <application>shipper</application> tries to
deduce what it should do rather than requiring you to tell it.  In
order to do this, it relies on your project obeying standard GNU-like
naming conventions.  It also relies on being able to mine project
metadata out of a package specfile. A package specfile may be either 
an RPM spec or a Debian control file; for both, <command>shipper</command>
expects to see a small handful of extension fields that tell it
what to do.</para>

<para>In normal use, you need set only one header,
<quote>Destinations:</quote> which is the list of destinations to ship
to.  You will also need to pass in the release version of the
software you are shipping. You may also want to add some magic
<quote>Project-Tag-List</quote> headers to your project specfiles.
Once you have <application>shipper</application> up and running, you
can experiment with more advanced features such as having the program
generate project web pages for you using a simple templating
system, and automatically tagging your shipped releases.</para>

<para>The output of shipper, run in your top-level project source
directory, is a shellscript. To ship your project, feed the script to
a shell (of course you can review it before you run it).  The only
shell features required are command execution and here-documents. No
wilcard expansion, shell control syntax, or shell variable evaluation
will be required.  In practical use you will probably want to pass
the shell the -e option (any command failure aborts the script, so
notifications sent later don't go out if an early upload fails) and
the -x option (to echo shipping commands as they are performed).</para>

</refsect1>

<refsect1><title>Theory of Operation</title>

<para><application>shipper</application> generates commands to push
<emphasis>deliverables</emphasis> out to
<emphasis>destinations</emphasis>.  Deliverables include: source
tarballs, source zip archives, ChangeLog files, README files,and
various other project metadata files.  Destinations include both
<emphasis>private destinations</emphasis> like websites, FTP archive
sites and mailing lists, and <emphasis>public destinations</emphasis>
like soureceforge.net, freecode.com, savannah.nongnu.org and berlios.de. The
<application>shipper</application> framework is extensible and it is
relatively easy to add new destination types and new deliverables; in
the future, we hope to support all major forge sites as
destinations.</para>

<para>The <application>shipper</application> program's first step is
to read the <filename>.shipper</filename> files in your home directory
and the current directory (if you like XDG conventions, make a
<filename>~/.config/shipper</filename> instead).  These set various
control variables and templates that <application>shipper</application>
will use later.</para>

<para>Second, <application>shipper</application> reads per-project
information from a specfile, either an RPM spec or a Debian control
file. The project name and various other pieces of
project-related metadata are extracted from the specfile.</para>

<para>The <option>-n</option> (nobuild) option causes
<application>shipper</application> to dump all configuration values
and exit immediately after collecting them.</para>

<para>The first real work that gets done is finding deliverables.
These are either unversioned project metadata (like a README or NEWS
file) or versioned product files such as source tarballs.</para>

<para>The last step before generating upload commands may be to
generate an HTML file for uploading, if you have specified the
<varname>html_target</varname> variable.</para>

<para>The option <option>-w</option> (web-only) tells shipper to
generate update commands web pages only rather than shipping (and
possibly tagging) a release. This may be useful for forges like
Savannah that have a tricky procedure for website updates.</para>

<para>Otherwise, <application>shipper</application> then generates
commands to upload deliverables and post all announcements.  The
<option>-x</option> may be use to suppress delivery to specified
destinations that would normally be performed (e.g., due to a
destination variable set in one of your <filename>.shipper</filename>
files); it may be a comma-separated list.</para>

<para>After deliverables have shipped successfully and notifications
posted, <application>shipper</application> determines if the directory
it is in is a working copy in a version-control system that supports
release tagging.  If so, and the <option>tag_template</option>
variable is set to a nonempty value, it generates commabds to tag the
release just shipped.  See <xref linkend='postinstall'/> for
discussion of what version-control systems are supported and what
actions will be taken.</para>

<para>Finally, note that <application>shipper</application> makes one
important assumption about the structure of your website(s).  Beneath
each directory in your <varname>destinations</varname> list, there
will be one subdirectory for each project, with the directory leaf
name being the same as the project.  Thus, for example, if you have
three projects named ruby, diamond and sapphire, and your personal
site is at <filename>gemstones.net:/public/www/precious/</filename>,
<application>shipper</application> will expect to be able to drop
deliverables in three directories
<filename>gemstones.net:/public/www/precious/ruby</filename>,
<filename>gemstones.net:/public/www/precious/diamond/</filename>, and
<filename>gemstones.net:/public/www/precious/sapphire/</filename>.
Note that <application>shipper</application> will not create these
project directories for you if they're missing; this is deliberate, so
that uploads to sites that are not prepared for them will fail
noisily.</para>
</refsect1>

<refsect1><title>How Shipper Deduces What To Do</title>

<para>The behavior of shipper depends on a handful of internal
variables.  Some of these variables have defaults computed at startup
time.  All can be set or overridden in the per-user
<filename>~/.config/shipper</filename> and
<filename>~/.shipper</filename> files, and overridden again in any
per-project <filename>.shipper</filename> file.  Both files are Python
code and the syntax of variable settings is Python's.</para>

<para>If a variable is set in a config file, that value is locked in
(except for the <varname>destinations</varname> variable which can be
appended to from a specfile, see below) Variables that are
<emphasis>not</emphasis> set in a config file may be set by the values
of fields in your project specfile.</para>

<para>Any variable, locked or not, can be overidden from the command
line by an argument of the form "name=value".</para>

<para>For basic use, it is only necessary to set one such variable:
<varname>destinations</varname>, the list of destinations to ship to.
Normally you'll set this globally, pointing all your projects at your
main distribution website and public drop sites, in your
<filename>~/.shipper</filename> file.  It is also possible to add
destinations on a per-project basis by giving a comma-separated list
in a #Destinations: comment in the specfile.  You can set the variable
in a per-project <filename>.shipper</filename> to ignore your global
destination list.</para>

<para>The first thing shipper looks for is a specfile in the current
directory; there must be exactly one.  It extracts the project name
from the Name field.</para>

<para>Next step is to find the project version (the variable
<varname>version</varname>). Normally you will pass this in 
as a 'version=' setting on the shipper command line.  But if
it is more convenient for your build practices to regenerate the
specfile on each build, you can set a Version header and
that will be picked up.</para>

<para><application>shipper</application> gets most of the rest of the
data it uses to decide what commands to generate from headers in the
specfile.  The following table lists all the variables and their
corresponding specfile fields.</para>

<informaltable>
<tgroup cols="4">
<thead>
<row>
<entry>Variable</entry>
<entry>RPM specfile field</entry>
<entry>Debian specfile field</entry>
<entry>Meaning</entry>
</row>
</thead>
<tbody>
<row>
<entry><varname>destinations</varname></entry>
<entry>#Destinations:</entry>
<entry>XBS-Destinations:</entry>
<entry>
<para>A list of destinations to ship to using
<citerefentry>
<refentrytitle>scp</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry>.  Each location is a place to drop deliverables:
either a [user@]site:path destination that
<citerefentry>
<refentrytitle>scp</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry> can use, or an FTP url that
<citerefentry>
<refentrytitle>lftp</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry>
can use, or one of the special public destination names. Note that when
the destination is a web or FTP site
actual project directory is computed by
appending the value of <varname>package</varname> to
the destination you're shipping to.</para>

<para>A destination entry of <quote>~</quote> can be used to clear the
previously-set value, so an individual project control file can ignore
destinations set in your home-directory
<filename>~/.shipper</filename> file.  Additionally, <quote>~</quote>
followed by a destination causes that individual destination to be
removed.</para>

<para><emphasis role='bold'>There is no default.</emphasis>.  If you
do not set this variable, <application>shipper</application> won't
generate any shipping commands.</para>
</entry>
</row>
<row>
<entry><varname>whoami</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>A name and email address for the user; should be RFC-822 form,
e.g. "J. Random User &lt;user@fubar.com&gt;. If you don't configure
this, shipper will snoop the configuration files of other programs
attempting to deduce it.</para>
</entry>
</row>
<row>
<entry><varname>gittip_id</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>Your ID on <ulink url="http//gittip.com">gittip.com</ulink>. If
present, generated web pages will include a link to your gittip
page where people can leave tips.</para>
</entry>
</row>
<row>
<entry><varname>date</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>The program's startup time. This can be used in the web page and
email announcement templates.</para>

<para>You can use the Python function time.strftime("...") in your
<filename>~/.shipper</filename> file to format this date to your
taste.  If you don't set this in the config file, the program will
set a default for you.</para>
</entry>
</row>
<row>
<entry><varname>html_target</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>File to which a templated web page generated from the release
data should be generated.  If this variable is an empty string (the
default), templated page generation is suppressed.  The most likely
value for this, if you set it, is "index.html"</para>
</entry>
</row>
<row>
<entry><varname>html_template</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>Template HTML from which to generate the page_file for shipping.
There is a default which generates a very simple page containing a
title, a date, and a table listing downloadable resources.  This is
used when shipping to a web directory if the <varname>html_target</varname> is
set. If this variable is None or an empty string, index page generation is
suppressed.</para>
</entry>
</row>
<row>
<entry><varname>mail_template</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>Template text from which to generate the message
shipped to destinations that are mailto URLs.  There is a default which
generates a very simple email containing a subject, a pointer to the 
project web page, and the last entry in the project changelog.</para>
</entry>
</row>
<row>
<entry><varname>package</varname></entry>
<entry>Name:</entry>
<entry>Package:</entry>
<entry>
<para>Project name, used to generate the stem part of the names
deliverables that <application>shipper</application> builds. If the
specfile is a Debian control file, the Debian-specific part of the
version number (after the dash) is removed.</para>
</entry>
</row>
<row>
<entry><varname>version</varname></entry>
<entry>Version:</entry>
<entry>Version:</entry>
<entry>
<para>Project version, used in generating the names of deliverables
that <application>shipper</application> builds.  In order to run,
<application>shipper</application> requires that version be set
somewhere, in a profile or spec file or as a command-line override.</para>
</entry>
</row>
<row>
<entry><varname>website</varname></entry>
<entry>URL:</entry>
<entry>Website:</entry>
<entry>
<para>Project website URL. Used when generating project announcements. When your
upload destination is Berlios or SourceForge, this will be generated for you
if you don't specify it.</para>
</entry>
</row>
<row>
<entry><varname>project_tags</varname></entry>
<entry>#Project-Tag-List:</entry>
<entry>XBS-Project-Tag-List:</entry>
<entry>
<para>Topic tags, used on Freecode.</para>
</entry>
</row>
<row>
<entry><varname>freecode_name</varname></entry>
<entry>#Freecode-Name:</entry>
<entry>XBS-Freecode-Name:</entry>
<entry>
<para>Freecode shortname, used in generating freecode.com
announcements. If this isn't present, it defaults to the project
name; you only need to set it if they differ.</para>
</entry>
</row>
<row>
<entry><varname>savannah_name</varname></entry>
<entry>#Savannah-Name:</entry>
<entry>XBS-Savannah-Name:</entry>
<entry>
<para>Savannah shortname, used in generating announcements and
computing the location of your project web directory on
savannah.nongnu.org (no support for gnu projects yet). If this isn't
present, it defaults to the project name; you only need to set it if
they differ.</para>
</entry>
</row>
<row>
<entry><varname>berlios_name</varname></entry>
<entry>#Berlios-Name:</entry>
<entry>XBS-Berlios-Name:</entry>
<entry>
<para>Berlios shortname, used in generating berlios.de
announcements and computing the location of your project web
directory. If this isn't present, it defaults to the project
name; you only need to set it if they differ.</para>
</entry>
</row>
<row>
<entry><varname>sourceforge_name</varname></entry>
<entry>#SourceForge-Name:</entry>
<entry>XBS-SourceForge-Name:</entry>
<entry>
<para>SourceForge shortname, used in generating announcements and
computing the location of your project directories on SourceForge. If
this isn't present, it defaults to the project name; you only need to
set it if they differ.</para>

<para>If your SourceForge-Name has a '@' in it, the prefix before that
is removed and interpreted as your SourceForge user ID. If no such prefix
is present, the user ID from whoami will be assumed.</para>  
</entry>
</row>
<row>
<entry><varname>sourceforge_folder</varname></entry>
<entry>#SourceForge-Folder:</entry>
<entry>XBS-SourceForge-Folder:</entry>
<entry>
<para>Path componenent to be appended to the destination for file
updates. Useful when you want to organize release tarballs into
subdirectories for historical or other reasons.</para>
</entry>
</row>
<row>
<entry><varname>gitorious_url</varname></entry>
<entry>#Gitorious-URL:</entry>
<entry>XBS-Gitorious-URL:</entry>
<entry>
<para>URL pointing at Gitorious hosting space for the project. If it
exists, it should point at a git repository for the source code.</para>
</entry>
</row>
<row>
<entry><varname>github_url</varname></entry>
<entry>#Github-URL:</entry>
<entry>XBS-Github-URL:</entry>
<entry>
<para>URL pointing at GitHub hosting space for the project. If it
exists, it should point at a git repository for the source code.</para>
</entry>
</row>
<row>
<entry><varname>ohloh_url</varname></entry>
<entry>#Ohloh-URL:</entry>
<entry>XBS-Ohloh-URL:</entry>
<entry>
<para>URL pointing at Ohloh statistics.</para>
</entry>
</row>
<row>
<entry><varname>irc_channel</varname></entry>
<entry>#IRC-Channel:</entry>
<entry>XBS-IRC-Channel:</entry>
<entry>
<para>URL pointing at one IRC chat channel for the project, or 
a comma-separated list of such channels.</para>
</entry>
</row>
<row>
<entry><varname>summary</varname></entry>
<entry>Summary</entry>
<entry>Description:</entry>
<entry>
<para>The one-line project summary field from your specfile.</para>
</entry>
</row>
<row>
<entry><varname>description</varname></entry>
<entry>%description</entry>
<entry>Description:</entry>
<entry>
<para>The Description field from your specfile.</para>
</entry>
</row>
<row>
<entry><varname>lastchange</varname></entry>
<entry>-</entry>
<entry align='center'>-</entry>
<entry>
<para>
The last-change entry from your NEWS, Changelog, or RPM spec file. To
extract this information from a NEWS or HISTORY file, first any header
lines (detected by leading spaces) are skipped; in a specfile, all
lines up to and including %changelog are skipped.  Then the first
nonblank line (which is assumed to be the date/release information) is
skipped.  Then all lines before the next blank one are grabbed.
</para>
</entry>
</row>
<row>
<entry><varname>resourcetable</varname></entry> <entry
align='center'>-</entry> <entry align='center'>-</entry>
<entry>
<para>The HTML table of links to downloadable resources.  This
variable is only computed if the index page is built.  Any setting
of it in the startup files is ignored.</para>
</entry>
</row>
<row>
<entry><varname>extralines</varname></entry> <entry
align='center'>Extra-Lines:</entry> <entry align='center'>-</entry>
<entry>
<para>Lines to be inserted after the table of resources.  You
can set this; <application>shipper</application> may add to it to,
for example, create a link to the project's Freecode page.</para>
</entry>
</row>
<row>
<entry><varname>logo</varname></entry>
<entry align='center'>#Logo</entry>
<entry align='center'>XBS-Logo</entry>
<entry>
<para>A logo or icon for the project.  The default web page template will
embed this in the page header.</para>
</entry>
</row>
<row>
<entry><varname>webdir</varname></entry>
<entry>#Web-Directory</entry>
<entry>#XBS-Web-Directory</entry>
<entry>
<para>The relative path of a web directory to be mirrored to project
webspace at a forge location. If this is defined it overrides the
normal web page templating mechanism associated with the
<varname>html_template</varname> and <varname>html_target</varname>
variables.</para>

<para>Usually shipper just generates an rsync of this directory to
the host location, but it may take special action for forges like Savannah
that have tortuous procedures for updating webspace.</para>
</entry>
</row>
<row>
<entry><varname>tag_template</varname></entry>
<entry>#Tag-Template</entry>
<entry>#XBS-Tagtemplate</entry>
<entry>
<para>You can change tagging behavior by setting the variable
<varname>tagtemplate</varname>. If you set it to None, release tagging
will be suppressed entirely.  If you set it to a nonempty string, that
will become the template for the name of the tag.  The "%(version)s"
in the string will be replaced with the version number, and other
globals are available for substitution in the same way.</para>
</entry>
</row>
<row>
<entry><varname>tag_message</varname></entry>
<entry>#Tag-Message</entry>
<entry>#XBS-Tag-Message</entry>
<entry>
<para>You can also customize the actual log message by setting
the variable <varname>tagmessage</varname>.  See the default with
<command>shipper -N</command>; the "%(version)s" in it will be
replaced with the version, and other globals
are available for substitution in the same way.</para>

<para>bzr, however, cannot annotate tags.  The <varname>tagmessage</varname>
variable will be ignored in this case.</para>
</entry>
</row>

<row>
<entry><varname>irc_message</varname></entry>
<entry>#IRC-Message</entry>
<entry>#XBS-IRC-Message</entry>
<entry>
<para>You can customize the IRC message(s) sent on release by setting
the variable <varname>ircmessage</varname>.  See the default with
<command>shipper -n</command>; variable cookies in it will be 
replaced in obvious ways.</para>

<para>bzr, however, cannot annotate tags.  The <varname>tagmessage</varname>
variable will be ignored in this case.</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>All these variables are available for substitution at the time a
web page or email announcement is generated. In general, any variable
you set in your <filename>~/.shipper</filename> file will be available
at the time the web page or email announcement is generated.  Use the
Python "%(variable)s" syntax, not shell-substitution syntax.</para>

</refsect1>

<refsect1><title>Finding Local Deliverables</title>

<para>The following files are considered stock deliverables and may be
shipped if they are present when <application>shipper</application>
starts up:</para>

<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>File</entry>
<entry>Explanation</entry>
</row>
</thead>
<tbody>
<row>
<entry>README or READ.ME</entry>
<entry>
<para>Project roadmap file.</para>
</entry>
</row>
<row>
<entry>tarballs</entry>
<entry>
<para>Current source tarballs, that is any files named
${package}.*-${version}.tar.gz or ${package}.*-${version}.tgz or
${package}.*-${version}.tar.bz2.</para>
</entry>
</row>
<row>
<entry>checksum files</entry>
<entry>
<para>Current source tarball checksums, that is any files named
${package}.*-${version}.md5 or 
${package}.*-${version}.sh{224,356,384,512}.</para>
</entry>
</row>
<row>
<entry>RPMs</entry>
<entry>
<para>Current RPMs, that is any files named
${package}.*-${version}.*.rpm.</para>
</entry>
</row>
<row>
<entry>debs</entry>
<entry>
<para>Current deb files, that is any files named
${package}.*-${version}.*.deb.</para>
</entry>
</row>
<row>
<entry>zipfiles</entry>
<entry>
<para>Current source zip archives, that is any file named ${package}.*-${version}.zip.</para>
</entry>
</row>
<row>
<entry>COPYING</entry>
<entry>
<para>Project license file.</para>
</entry>
</row>
<row>
<entry>NEWS</entry>
<entry>
<para>Project news file.</para>
</entry>
</row>
<row>
<entry>ChangeLog</entry>
<entry>
<para>Project change log.</para>
</entry>
</row>
<row>
<entry>HISTORY</entry>
<entry>
<para>Project history file.</para>
</entry>
</row>
<row>
<entry>BUGS</entry>
<entry>
<para>Project bug list.</para>
</entry>
</row>
<row>
<entry>TODO</entry>
<entry>
<para>Current to-do list.</para>
</entry>
</row>
<row>
<entry>*.{html,xhtml,css,js}</entry>
<entry>
<para>Any files with an .html, .js, or .css extension will normally be
shipped to all website destinations. This is overridden if you have
declared a web directory to mirror to website destinations.</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>Stock deliverables which are textfiles and contain the string
"shipper: ignore this." will not be shipped by the generated script.
This is especially useful for archival GNU-style ChangeLogs, which you
may want to avoid shipping but which need to be present to pacify
autotools.</para>

<para>Here are the generated deliverables that
<application>shipper</application> will build and ship, if they don't
exist when it starts up.  Any of these that are created will be 
deleted after a successful upload.</para>

<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Type</entry>
<entry>Explanation</entry>
</row>
</thead>
<tbody>
<row>
<entry>tarball, zipfile, RPMs, debs, README, COPYING, ChangeLog, NEWS, HISTORY,
BUGS, TODO.</entry>
<entry>
<para>If the Sourceforge or Savannah destinations are on your list,
<application>shipper</application> will attempt to ship a tarball and
source and binary RPMs to your project's download directory via scp.
It will also attempt to upload all web deliverables (README, CHANGES,
NEWS, HISTORY, *.{html,css,js}, BUGS, TODO) to the project's web
directory. Note that on Savannah, web page changes may not be visible
for up to an hour after submission!</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>Additionally, if the <varname>html_template</varname> and
<varname>html_target</varname> variables are set, a templated HTML
page named by it will be composed and shipped to websites by the
generated script.</para>
</refsect1>

<refsect1><title>Shipping to Destinations</title>
<para>In operation, <application>shipper</application> walks through a
list of destinations, building the required deliverables for each one and
generating the required shipping actions to push them out to the
destination.  Here are the destination types
<application>shipper</application> knows about:</para>

<informaltable>
<tgroup cols="4">
<colspec align='left'/>
<colspec align='left'/>
<colspec align='center'/>
<colspec align='left'/>
<thead>
<row>
<entry>Destination Type</entry>
<entry>Deliverables</entry>
<entry>Specified by</entry>
<entry>Explanation</entry>
</row>
</thead>
<tbody>
<row>
<entry>sourceforge</entry>
<entry>tarball, zipfile, RPMs, debs, README, COPYING, ChangeLog, NEWS, HISTORY, *.{html,css,js}, 
BUGS, TODO.</entry>
<entry>-</entry>
<entry>
<para>If the sourceforge destination is on your list,
<application>shipper</application> will generate commands to ship a
tarball and source and binary RPMs to the prject's frs directory via
rsync; the deliverables will be placed in a subdirectory named after
the version.  It will also attempt to upload all web deliverables
(README, CHANGES, NEWS, HISTORY, *.{html,css,js}, BUGS, TODO) to the
project's SourceForge web directory.</para>
</entry>
</row>
<row>
<entry>berlios</entry>
<entry>tarball, zipfile, RPMs, debs, README, COPYING, ChangeLog, NEWS, HISTORY, *.{html,css,js}, 
BUGS, TODO.</entry>
<entry>-</entry>
<entry>
<para>If the berlios destination is on your list,
<application>shipper</application> will generate commands to ship a
tarball and source and binary RPMs to the berlios.de submission
directory via FTP.  It will also attempt to upload all web
deliverables (README, CHANGES, NEWS, HISTORY, *.{html,css,js}, BUGS,
TODO) to the project's Berlios web directory.
</para>
</entry>
</row>
<row>
<entry>freecode</entry>
<entry>-</entry>
<entry>-</entry>
<entry>
<para>If the freecode destination is on your list,
<application>shipper</application> will generate a command to post a release
announcement on freecode.com using
<citerefentry><refentrytitle>freecode-submit</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
The announcement will include URLs for whichever of the following
deliverables are shipped, using the URL field from your specfile:
tarballs, zipfiles, RPMs, debs, ChangeLog.  This announcement is
generated into the local deliverable SHIPPER.FREECODE.</para>
</entry>
</row>
<row>
<entry>Generic Web site</entry>
<entry>README, COPYING, tarball, zipfile, RPMs, debs, ChangeLog, NEWS, HISTORY,
*.{html,css,js}, BUGS, TODO.</entry>
<entry>scp destination ([user@]host:dir)</entry>
<entry>
<para>This destination type represents a website.
<application>shipper</application> generates commands using
<citerefentry><refentrytitle>scp</refentrytitle><manvolnum>1</manvolnum></citerefentry>
to put deliverables on websites.  If the user part of the scp
destination is absent, it will be taken from the environment variable
<envar>USERNAME</envar>.</para>

<para>No generic Web sites are shipped to by default. You must declare
them by putting scp destinations in the <varname>destinations</varname>
variable.</para>
</entry>
</row>
<row>
<entry>Generic FTP site</entry>
<entry>tarball, RPMs, debs</entry>
<entry>FTP URL</entry>
<entry>
<para>Old-fashioned FTP site with no metadata.  The FTP URL is parsed
to get the sitename and directory where deliverables should be dropped.  The
FTP username to be used will be taken from the environment variable
<envar>USERNAME</envar>.  The FTP password will be looked up in your
<filename>~/.netrc</filename> file.</para>

<para>No generic FTP sites are shipped to by default.  You must
declare them by putting FTP urls in the
<varname>destinations</varname> variable.</para>
</entry>
</row>
<row>
<entry>Email address</entry>
<entry>-</entry>
<entry>mailto URL</entry>
<entry>
<para>A message expanded from the <varname>mail_template</varname> is
emailed to each email address specified as a destination.</para>

<para>No email destinations are set up by default.  You must
declare them by putting mailto: URLs in the
<varname>destinations</varname> variable.</para>
</entry>
</row>
<row>
<entry>IRC</entry>
<entry>-</entry>
<entry>IRC URL</entry>
<entry>
<para>A generated announcement is sent to a specified IRC channel.</para>

<para>No IRC destinations are set up by default.  You must declare
them by putting IRC urls in the <varname>destinations</varname>
variable. IRC URLs specified in the IRC-Channel variable are also
announced to; they're also listed on the templated web page,
if templating has been selected.</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsect1>

<refsect1 id='postinstall'><title>After Uploads</title>

<para>After upload commands have been generated,
<application>shipper</application> looks at where it is running. If it
can recognize that the current directory is under version control, and
the <varname>tag_template</varname> option has been enabled, it will
generare additional commands to tag the just-shipped tree as an
external release.</para>

<para>Currently, the version-control systems supported for tagging
after shipping are Subversion, git, hg, and bzr.  Due to variations
in tagging behavior in these systems, this feature behaves slightly
differently depending on which one is in use.</para>

<para>If the run is in the trunk of a Subversion repository (that is,
the current directory is name <filename>trunk</filename> and has a
subdirectory named <filename>.svn</filename>) and there is a
<filename>tags</filename> peer directory, and the tags directory does
not have a subdirectory named "$version", then
<application>shipper</application> generates commands to copy and tags
the contents of trunk.</para>

<para>If it is in a git, hg, or bzr repository (that is, there is a
subdirectory named <filename>.git</filename>,
<filename>.bzr</filename>, or <filename>.hg</filename>) it will
generare commands to tag the release. If there is a remote repo to be
pushed to, local changes and tags wil be pushed. In all three of these
cases the tag attempt will fail if the tag previously existed.  See
also the discussion of the <varname>tagtemplate</varname>
variable.</para>

<para>After tagging, commands to ship email notifications are
generated.</para>

<para>The last command generated, if applicable, will be the IRC
broadcast.</para>
</refsect1>

<refsect1><title>Command-line Options</title>

<para>The <option>-n</option> generates a
configuration dump to standard output.</para>

<para>The <option>-x</option> option specifies a destination, or a 
comma-separated list of destinations, not to ship to. This overrides 
the setting of the destinations variable by shippper config files and
control or spec files.</para>

<para>The -v option makes <application>shipper</application> chatty
about what it's doing.  The -h option prints a usage message and
exits.</para>

<para>Arguments, if present, must be of the form name=value and can be
used to override earlier settings from your profiles.  The most frequently 
useful override will probably be "version=".</para>

</refsect1>

<refsect1><title>Hints and Tips</title>
<para>The following variable definition in your makefile will ensure
that the makefile version is derived from (and thus always consistent
with) the specfile version.</para>

<programlisting>
VERSION=$(shell sed &lt;*.spec control -n -e '/Version: \(.*\)/s//\1/p')
</programlisting>

<para>A makefile production like the following will allow
you to type <command>make release</command> and be sure that all
the deliverables <application>shipper</application> knows about
will be rebuilt before being shipped.</para>

<programlisting>
release: <emphasis>package</emphasis>-$(VERS).tar.gz <emphasis>package</emphasis>-$(VERSION).md5
	shipper version=$(VERS) | sh -e -x
</programlisting>

<para>The -e option is recommended to make all errors fatal.  This
way if an upload fails for some reason, the later notifications won't
happen. The -x option makes the script echo its commands as they're 
performed.</para>

<para>You will want to change <emphasis>package</emphasis> to your 
project name. You will need to write a production that builds your
tarball and checksum files.</para>

<para>In an SConstruct file, you may want something like this:

<programlisting>
version = <emphasis>version</emphasis>
</programlisting>

and something like

<programlisting>
env.Alias("release", [tarball], 'shipper version=%s | sh -e -x' % version)
</programlisting>

with 'tarball' being a production that makes a release tarball (and
checksum file, if desired).
</para>

</refsect1>

<refsect1><title>Requirements</title>

<para>This program requires the following helpers for shipping to
specific destination types:</para>

<variablelist>
<varlistentry>
<term>freecode-submit</term>
<listitem><para>For shipping release notifications to freecode.com.
The freecode-submit program is <ulink
url="http://www.catb.org/~esr/freecode-submit">separately
maintained</ulink>.</para></listitem>
</varlistentry>

<varlistentry>
<term>irk</term>
<listitem><para>For shipping notices to IRC channels. The freecode-submit program is <ulink
url="http://www.catb.org/~esr/irkerd">separately
maintained</ulink>.</para></listitem>
</varlistentry>

<varlistentry>
<term>lftp</term>
<listitem><para>For shipping to ftp sites.  The freecode-submit
program is <ulink url="http://lftp.yar.ru/">separately
maintained</ulink>.</para></listitem>
</varlistentry>

<varlistentry>
<term>scp</term>
<listitem><para>For shipping to websites. There are several different
implementations of scp; one widely-used version is shipped by the
<ulink url="http://www.openssh.com/">OpenSSH project</ulink>.
</para></listitem>
</varlistentry>

<varlistentry>
<term>sendmail</term>
<listitem><para>For shipping email announcements. Either classic
sendmail or postfix sendmail will work. All it has to be able to do
is ship mail presented on standard input to a list of addresses
specified as arguments.</para></listitem>
</varlistentry>
</variablelist>

<para>These must be on your executable $PATH at the time this program
is invoked, or shipping to the relevant destination types will fail.</para>

</refsect1>

<refsect1><title>Bugs</title>
<para>The program can deliver downloadables to Berlios incoming, but
not script a Berlios release. That has to be done through the Berlios
web interface.</para>

<para>The Savannah support is not yet tested.</para>

<para>The program can put downloadables in place on SourceForge, but not set
the "Preferred Download". Usually this will point to the most recent download
subdirectory by default, which is the right thing.</para>
</refsect1>

<refsect1><title>Files</title>
<para>
<filename>$HOME/.shipper</filename>;
<filename>$HOME/.config/shipper</filename>;
<filename>$PWD/.shipper</filename>.
</para>

</refsect1>
<refsect1><title>Author</title>
<para>Eric S. Raymond <email>esr@thyrsus.com</email>.</para>

<para>There is a project web page at
<ulink
url="http://www.catb.org/~esr/shipper/">http://www.catb.org/~esr/shipper/</ulink>.</para>
</refsect1>

<refsect1><title>See Also</title>

<para>
<citerefentry>
<refentrytitle>freecode-submit</refentrytitle>
<manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>lftp</refentrytitle>
<manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>scp</refentrytitle>
<manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>ssh</refentrytitle>
<manvolnum>1</manvolnum>
</citerefentry>.</para>
</refsect1>
</refentry>

<!--
Local Variables:
compile-command: "make shipper.html"
End:
-->
