<!DOCTYPE refentry PUBLIC 
   "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "docbook/docbookx.dtd">
<refentry id='shipper.1'>
<refmeta>
<refentrytitle>shipper</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='source'>shipper</refmiscinfo>
<refmiscinfo class='manual'>Development Tools</refmiscinfo>
<refmiscinfo class='date'>Oct 17 2010</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname> shipper</refname>
<refpurpose>automatic drop-shipping of project releases</refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>

<cmdsynopsis>
  <command>shipper</command>  
  <arg choice='opt'>-u</arg>
  <arg choice='opt'>-n</arg>
  <arg choice='opt'>-v</arg>
  <arg choice='opt'>-m</arg>
  <arg choice='opt'>-t</arg>
  <arg choice='opt'>-x <replaceable>destinations</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para><application>shipper</application> is a tool for shipping
project releases.  Its job is to make it possible for you to run the
command <command>shipper</command> in the top-level directory of a
project and have a release be properly exported to all the places that
you normally deliver it &mdash; your personal website, Linux source
code archive sites, and distribution submission queues. A second goal
is to arrange your shipping process in such a way that metadata like
your project version only have to be kept in one place and modified
once per release. The overall goal is to reduce the friction cost
of shipping releases to as near zero as possible.</para>

<para>As much as possible, <application>shipper</application> tries to
deduce what it should do rather than requiring you to tell it.  In
order to do this, it relies on your project obeying standard GNU-like
naming conventions.  It also relies on being able to mine project
metadata out of a package specfile. A package specfile may be either 
an RPM spec or a Debian control file; for both, <command>shipper</command>
expects to see a small handful of extension fields that tell it
what to do.</para>

<para>In normal use, you need set only one header,
<quote>Destinations:</quote> which is the list of destinations to ship
to.  You may also want to add some magic <quote>Project-Tag-List</quote>
headers to your project specfiles.  Once you have
<application>shipper</application> up and running, you can experiment
with more advanced features such as having the program generate
project web pages for you.</para>
</refsect1>

<refsect1><title>Theory of Operation</title>

<para><application>shipper</application> pushes
<emphasis>deliverables</emphasis> out to
<emphasis>destinations</emphasis>.  Deliverables include: source
tarballs, source zip archives, ChangeLog files, README files,and
various other project metadata files.  Destinations include both
<emphasis>private destinations</emphasis> like websites, FTP archive
sites and mailing lists, and <emphasis>public destinations</emphasis>
like freecode.net and berlios.de. The
<application>shipper</application> framework is extensible and it is
relatively easy to add new destination types and new deliverables; in
the future, we hope to support all major forge sites as
destinations.</para>

<para>The <application>shipper</application> program's first step is
to read the <filename>.shipper</filename> files in your home directory
and the current directory.  These set various control variables and
templates <application>shipper</application> will use later.</para>

<para>Second, <application>shipper</application> reads per-project
information from a specfile, either an RPM spec or a Debian control
file. The project name, version, and various other pieces of
project-related metadata are extracted from the specfile.</para>

<para>The <option>-n</option> (nobuild) option causes
<application>shipper</application> to dump all configuration values
and exit immediately after collecting them.</para>

<para>The first real work that gets done is finding deliverables.
These are either unversioned project metadata (like a README or NEWS
file) or versioned product files such as source tarballs. Finding
deliverables is separated from uploading because it means that you can
stop and inspect what you're going to ship before committing to an
upload.</para>

<para>The last step before uploading may be to generate an
<filename>index.html</filename> file for uploading, if no such file
alreay exists and you have specified the <option>-m</option>
option.</para>

<para>Without the <option>-u</option> (upload) option,
<application>shipper</application> stops just before uploading,
displaying the exact upload commands that would have been used to ship
deliverables.  Thus, the command <command>shipper</command> with no
options will show you exactly what <application>shipper</application>
would do for a real upload.</para>

<para>Otherwise, <application>shipper</application> then uploads
deliverables and posts all announcements.  The <option>-x</option> may
be use to suppress delivery to specified destinations that would
normally be performed (e.g., due to a destination variable set in one
of your <filename>.shipper</filename> files>); it may be a
comma-separated list.</para>

<para>After deliverables have shipped successfully and notifications
posted, <application>shipper</application> determines if the directory
it is in is a working copy in a version-control system that supports
release tagging.  If so, and the <option>-t</option> has been
selected, it tries to tag the release just shipped.  See <xref
linkend='postinstall'/> for discussion of what version-control systems
are supported and what actions will be taken.</para>

<para>Finally, note that <application>shipper</application> makes one
important assumption about the structure of your website(s).  Beneath
each directory in your <varname>destinations</varname> list, there
will be one subdirectory for each project, with the directory leaf
name being the same as the project.  Thus, for example, if you have
three projects named ruby, diamond and sapphire, and your personal
site is at <filename>gemstones.net:/public/www/precious/</filename>,
<application>shipper</application> will expect to be able to drop
deliverables in three directories
<filename>gemstones.net:/public/www/precious/ruby</filename>,
<filename>gemstones.net:/public/www/precious/diamond/</filename>, and
<filename>gemstones.net:/public/www/precious/sapphire/</filename>.
Note that <application>shipper</application> will not create these
project directories for you if they're missing; this is deliberate, so
that uploads to sites that are not prepared for them will fail
noisily.</para>
</refsect1>

<refsect1><title>How Shipper Deduces What To Do</title>

<para>The behavior of shipper depends on a handful of internal
variables.  Some of these variables have defaults computed at startup
time.  All can be set or overridden in the per-user
<filename>~/.shipper</filename> file, and overridden again in any
per-project <filename>.shipper</filename> file.  Both files are Python
code and the syntax of variable settings is Python's.</para>

<para>If a variable is set in a config file, that value is locked in
(except for the <varname>destinations</varname> variable which can be
appended to from a specfile, see below) Variables that are
<emphasis>not</emphasis> set in a config file may be set by the values
of fields in your project specfile.</para>

<para>For basic use, it is only necessary to set one such variable:
<varname>destinations</varname>, the list of destinations to ship to.
Normally you'll set this globally, pointing all your projects at your
main distribution website and public drop sites, in your
<filename>~/.shipper</filename> file.  It is also possible to add
destinations on a per-project basis by giving a comma-separated list
in a #Destinations: comment in the specfile.  You can set the variable
in a per-project <filename>.shipper</filename> to ignore your global
destination list.</para>

<para>The first thing shipper looks for is a specfile in the current
directory; there must be exactly one.  It extracts the project name
from the Name field.  Next step is to find the project version (the
variable <varname>package</varname>).  This is extracted from the
Version field of the specfile, or by looking for a makefile macro with
a name beginning with VERS; if the value of that macro is a shell
command wrapped in $(shell ...), it is executed and the output is
captured to yield the version.  If both versions are present, they are
consistency-checked.</para>

<para><application>shipper</application> gets most of the rest of the
data it uses to decide what to do from headers in the specfile.
The following table lists all the variables and their corresponding
specfile fields.</para>

<informaltable>
<tgroup cols="4">
<thead>
<row>
<entry>Variable</entry>
<entry>RPM specfile field</entry>
<entry>Debian specfile field</entry>
<entry>Meaning</entry>
</row>
</thead>
<tbody>
<row>
<entry><varname>destinations</varname></entry>
<entry>#Destinations:</entry>
<entry>XBS-Destinations:</entry>
<entry>
<para>A list of destinations to ship to using
<citerefentry>
<refentrytitle>scp</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry>.  Each location is a place to drop deliverables:
either a [user@]site:path destination that
<citerefentry>
<refentrytitle>scp</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry> can use, or an FTP url that
<citerefentry>
<refentrytitle>lftp</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry>
can use, or one of the special public destination names. Note that when
the destination is a web or FTP site
actual project directory is computed by
appending the value of <varname>package</varname> to
the destination you're shipping to.</para>

<para>A destination entry of <quote>~</quote> can be used to clear the
previously-set value, so an individial project control file can ignore
desrinations set in your home-directory
<filename>~/.shipper</filename> file.  Additionally, <quote>~</quote>
followed by a destination causes that individual destination to be
removed.</para>

<para><emphasis role='bold'>There is no default.</emphasis>.  If you
do not set this variable, <application>shipper</application> won't
ship anything.</para>
</entry>
</row>
<row>
<entry><varname>whoami</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>A name and email address for the user; should be RFC-822 form,
e.g. "J. Random User &lt;user@fubar.com&gt;. If you don't configure
this, shipper will snoop the configuration files of other programs
attempting to deduce it.</para>
</entry>
</row>
<row>
<entry><varname>date</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>The program's startup time. This can be used in the web page and
email announcement templates.</para>

<para>You can use the Python function time.strftime("...") in your
<filename>~/.shipper</filename> file to format this date to your
taste.  If you don't set this in the config file, the program will
set it for you.</para>
</entry>
</row>
<row>
<entry><varname>indextemplate</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>Template HTML from which to generate index.html for shipping.
There is a default which generates a very simple page containing a
title, a date, and a table listing downloadable resources.  This is
used when shipping to a web directory, if the <option>-m</option> option is
set. If this variable in None, index page generation is
suppressed.</para>
</entry>
</row>
<row>
<entry><varname>mailtemplate</varname></entry>
<entry align='center'>-</entry>
<entry align='center'>-</entry>
<entry>
<para>Template text from which to generate the file SHIPPER.EMAIL to be
shipped to destinations that are mailto URLs.  There is a default which
generates a very simple email containing a subject, a pointer to the 
project web page, and the last entry in the project changelog.</para>
</entry>
</row>
<row>
<entry><varname>package</varname></entry>
<entry>Name:</entry>
<entry>Package:</entry>
<entry>
<para>Project name, used to generate the stem part of the names
deliverables that <application>shipper</application> builds. If the
specfile is a Debian control file, the Debian-specific part of the
version number (after the dash) is removed.</para>
</entry>
</row>
<row>
<entry><varname>version</varname></entry>
<entry>Version:</entry>
<entry>Version:</entry>
<entry>
<para>Project version, used in generating the names of deliverables
that <application>shipper</application> builds.</para>
</entry>
</row>
<row>
<entry><varname>website</varname></entry>
<entry>URL:</entry>
<entry>Website:</entry>
<entry>
<para>Project website URL. Used when generating project announcements. When your
upload destination is SourceForge, this will be generated for you
if you don't specify it.</para>
</entry>
</row>
<row>
<entry><varname>project_tags</varname></entry>
<entry>#Project-Tag-List:</entry>
<entry>XBS-Project-Tag-List:</entry>
<entry>
<para>Topic tags, used on Freecode.</para>
</entry>
</row>
<row>
<entry><varname>freecode_name</varname></entry>
<entry>#Freecode-Name:</entry>
<entry>XBS-Freecode-Name:</entry>
<entry>
<para>Freecode shortname, used in generating freecode.net
announcements. If this isn't present, it defaults to the project
name; you only need to set it if they differ.</para>
</entry>
</row>
<row>
<entry><varname>sourceforge_name</varname></entry>
<entry>#SourceForge-Name:</entry>
<entry>XBS-SourceForge-Name:</entry>
<entry>
<para>SourceForge shortname, used in generating announcements and
computing the location of your project directories on SourceForge. If
this isn't present, it defaults to the project name; you only need to
set it if they differ.</para>

<para>If your SourceForge-Name has a '@' in it, the prefix before that
is removed an interpreted as your SourceForge user ID. If no such prefix
is present, the user ID from whoami will be assumed.</para>  
</entry>
</row>
<row>
<entry><varname>gitorious_url</varname></entry>
<entry>#Gitorious-URL:</entry>
<entry>XBS-Gitorious-URL:</entry>
<entry>
<para>URL pointing at Gitorious hosting space for the project. If it
exists, it should point at a git repository for the source code.</para>
</entry>
</row>
<row>
<entry><varname>summary</varname></entry>
<entry>Summary</entry>
<entry>Description:</entry>
<entry>
<para>The one-line project summary field from your specfile.</para>
</entry>
</row>
<row>
<entry><varname>description</varname></entry>
<entry>%description</entry>
<entry>Description:</entry>
<entry>
<para>The Description field from your specfile.</para>
</entry>
</row>
<row>
<entry><varname>lastchange</varname></entry>
<entry>-</entry>
<entry align='center'>-</entry>
<entry>
<para>
The last-change entry from your NEWS, Changelog, or RPM spec file. To
extract this information from a NEWS or HISTORY file, first any header
lines (detected by leading spaces) are skipped; in a specfile, all
lines up to and including %changelog are skipped.  Then the first
nonblank line (which is assumed to be the date/release information) is
skipped.  Then all lines before the next blank one are grabbed.
</para>
</entry>
</row>
<row>
<entry><varname>resourcetable</varname></entry> <entry
align='center'>-</entry> <entry align='center'>-</entry>
<entry>
<para>The HTML table of links to downloadable resources.  This
variable is only computed if the index page is built.  Any setting
of it in the startup files is ignored.</para>
</entry>
</row>
<row>
<entry><varname>extralines</varname></entry> <entry
align='center'>-</entry> <entry align='center'>-</entry>
<entry>
<para>Lines to be inserted after the table of resources.  You
can set this; <application>shipper</application> may add to it to,
for example, create a link to the project's Freecode page.</para>
</entry>
</row>
<row>
<entry><varname>logo</varname></entry>
<entry align='center'>#Logo</entry>
<entry align='center'>XBS-Logo</entry>
<entry>
<para>A logo or icon for the project.  The default web page template will
embed this in the page header.</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>All these variables are available for substitution at the time a
web page or email announcement is generated. In general, any variable
you set in your <filename>~/.shipper</filename> file will be available
at the time the web page or email announcement is generated.  Use the
Python "%(variable)s" syntax, not shell-substitution syntax.</para>

</refsect1>

<refsect1><title>Finding Local Deliverables</title>

<para>The following files are considered stock deliverables and may be
shipped if they are present when <application>shipper</application>
starts up:</para>

<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>File</entry>
<entry>Explanation</entry>
</row>
</thead>
<tbody>
<row>
<entry>README or READ.ME</entry>
<entry>
<para>Project roadmap file.</para>
</entry>
</row>
<row>
<entry>tarballs</entry>
<entry>
<para>Current source tarballs, that is any files named
${package}.*-${version}.tar.gz or ${package}.*-${version}.tgz or
${package}.*-${version}.tar.bz2.</para>
</entry>
</row>
<row>
<entry>RPMs</entry>
<entry>
<para>Current RPMs, that is any files named
${package}.*-${version}.*.rpm.</para>
</entry>
</row>
<row>
<entry>debs</entry>
<entry>
<para>Current deb files, that is any files named
${package}.*-${version}.*.deb.</para>
</entry>
</row>
<row>
<entry>zipfiles</entry>
<entry>
<para>Current source zip archives, that is any file named ${package}.*-${version}.zip.</para>
</entry>
</row>
<row>
<entry>COPYING</entry>
<entry>
<para>Project license file.</para>
</entry>
</row>
<row>
<entry>NEWS</entry>
<entry>
<para>Project news file.</para>
</entry>
</row>
<row>
<entry>ChangeLog</entry>
<entry>
<para>Project change log.</para>
</entry>
</row>
<row>
<entry>HISTORY</entry>
<entry>
<para>Project history file.</para>
</entry>
</row>
<row>
<entry>BUGS</entry>
<entry>
<para>Project bug list.</para>
</entry>
</row>
<row>
<entry>TODO</entry>
<entry>
<para>Current to-do list.</para>
</entry>
</row>
<row>
<entry>*.{html,xhtml,css,js}</entry>
<entry>
<para>Any files with an .html, .js, or .css extension will be shipped to all 
website destinations.</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>Here are the generated deliverables that
<application>shipper</application> will build and ship, if they don't
exist when it starts up.  Any of these that are created will be 
deleted after a successful upload.</para>

<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Type</entry>
<entry>Explanation</entry>
</row>
</thead>
<tbody>
<row>
<entry>index.html</entry>
<entry>
<para>An index web page, to be shipped to any website destination.
Only generated if the <option>-m</option> option is set.</para>
</entry>
</row>
<row>
<entry>SHIPPER.FREECODE</entry>
<entry>
<para>If freecode is in the user's destination list,
<application>shipper</application> will generate a file called
SHIPPER.FREECODE, unless that file already exists (this is soo you
can geberate the file with <command>shipper -n</command> and edit it
before running without <option>-n</option>). This file will be a job card
that can be fed to freecode.net's API via
<citerefentry><refentrytitle>freecode-submit</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
</para>
</entry>
</row>
<row>
<entry>SHIPPER.EMAIL</entry>
<entry>
<para>This what <application>shipper</application> generates to be
emailed to destinations that are mailto URLs.  This file mill not be
generated if it already exists (this is so you can generate the file
with <command>shipper</command> (no options) and edit it before
running with <option>-u</option>).</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsect1>

<refsect1><title>Shipping to Destinations</title>
<para>In operation, <application>shipper</application> walks through a
list of destinations, building the required deliverables for each one and
performing the required shipping actions to push them out to the
destination.  Here are the destination types
<application>shipper</application> knows about:</para>

<informaltable>
<tgroup cols="4">
<colspec align='left'/>
<colspec align='left'/>
<colspec align='center'/>
<colspec align='left'/>
<thead>
<row>
<entry>Destination Type</entry>
<entry>Deliverables</entry>
<entry>Specified by</entry>
<entry>Explanation</entry>
</row>
</thead>
<tbody>
<row>
<entry>sourceforge</entry>
<entry>tarball, zipfile, RPMs, debs, README, COPYING, ChangeLog, NEWS, HISTORY, *.{html,css,js}, 
BUGS, TODO.</entry>
<entry>-</entry>
<entry>
<para>If the sourceforge destination is on your list,
<application>shipper</application> will attempt to ship a tarball and
source and binary RPMs to the prject's frs directory via rsync; the
deliverables will be placed in a subdirectory named after the version.
It will also attempt to upload all web deliverables (README, CHANGES,
NEWS, HISTORY, *.{html,css,js}, BUGS, TODO) to the project's
SourceForge web directory.</para>
</entry>
</row>
<row>
<entry>freecode</entry>
<entry>SHIPPER.FREECODE</entry>
<entry>-</entry>
<entry>
<para>If the freecode destination is on your list,
<application>shipper</application> will attempt to post a release
announcement on freecode.net using
<citerefentry><refentrytitle>freecode-submit</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
The announcement will include URLs for whichever of the following
deliverables are shipped, using the URL field from your specfile:
tarballs, zipfiles, RPMs, debs, ChangeLog.  The user will be prompted for a
Freecode release-focus.  This announcement is generated into the
local deliverable SHIPPER.FREECODE.</para>
</entry>
</row>
<row>
<entry>Generic Web site</entry>
<entry>README, COPYING, tarball, zipfile, RPMs, debs, ChangeLog, NEWS, HISTORY,
*.{html,css,js}, BUGS, TODO.</entry>
<entry>scp destination ([user@]host:dir)</entry>
<entry>
<para>This destination type represents a website.
<application>shipper</application> uses
<citerefentry><refentrytitle>scp</refentrytitle><manvolnum>1</manvolnum></citerefentry>
to put deliverables on websites.  If the user part of the scp
destination is absent, it will be taken from the environment variable
<envar>USERNAME</envar>.</para>

<para>No generic Web sites are shipped to by default. You must declare
them by putting scp destinations in the <varname>destinations</varname>
variable.</para>
</entry>
</row>
<row>
<entry>Generic FTP site</entry>
<entry>tarball, RPMs, debs</entry>
<entry>FTP URL</entry>
<entry>
<para>Old-fashioned FTP site with no metadata.  The FTP URL is parsed
to get the sitename and directory where deliverables should be dropped.  The
FTP username to be used will be taken from the environment variable
<envar>USERNAME</envar>.  The FTP password will be looked up in your
<filename>~/.netrc</filename> file.</para>

<para>No generic FTP sites are shipped to by default.  You must
declare them by putting FTP urls in the
<varname>destinations</varname> variable.</para>
</entry>
</row>
<row>
<entry>Email address</entry>
<entry>SHIPPER.EMAIL</entry>
<entry>mailto URL</entry>
<entry>
<para>The contents of the generated SHIPPER.EMAIL file is emailed to
each email address specified as a destination.</para>

<para>No email destinations are set up by default.  You must
declare them by putting mailto: urls in the
<varname>destinations</varname> variable.</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsect1>

<refsect1 id='postinstall'><title>After Deliverables have Shipped</title>

<para>When uploads are complete, <application>shipper</application>
looks at where it is running. If it can recognize that the current
directory is under version control, and the <option>-t</option> option
has been anabled, it will try to tag the just-shipped tree as an
external release.</para>

<para>Currently, the version-control systems supported for tagging
after shipping are Subversion, git, hg, and bzr.  Due to variations
in tagging behavior in these systems, this feature behaves slightly
differently depending on which one is in use.</para>

<para>If it is in the trunk of a Subversion repository (that is, the
current directory is name <filename>trunk</filename> and has a
subdirectory named <filename>.svn</filename>) and there is a
<filename>tags</filename> peer directory, and the tags directory does
not have a subdirectory named "$version", then
<application>shipper</application> copies and tags the contents of
trunk.</para>

<para>If it is in a git, hg, or bzr repository (that is, there is a
subdirectory named <filename>.git</filename>,
<filename>.bzr</filename>, or <filename>.hg</filename>) it will tag
the release. In all three of these cases the tag attempt will fail if
the tag previously existed.</para>

<para>You can change this action by setting the variable
<varname>tag_template</varname>. If you set it to None,
release tagging will be suppressed entirely.  If you set it to a
nonempty string, that will become the template for the name of the
tag.  "%s" in the string will be replaced with the
version number.</para>

<para>You can also customize the actual log message by setting the variable
<varname>tag_message</varname>.  See the default with <command>shipper
-N</command>; the %s in it will be replaced with the version.</para>

<para>bzr, however, cannot annotate tags.  The <varname>tag_message</varname>
variable will be ignored in this case.</para>
</refsect1>

<refsect1><title>Command-line Options</title>

<para>The <option>-n</option> generates a
configuration dump to standard output.</para>

<para>The <option>-u</option> option enables uploading.</para>

<para>The <option>-m</option> option tells
<application>shipper</application> to generate a web page an upload it
to website destinations.</para>

<para>The <option>-t</option> option tells <application>shipper</application> to
attempt to tag the local repo after shipping.</para>

<para>The <option>-x</option> option specifies a destination, or a 
comma-separated list of destinations, not to ship to. This overrides 
the setting of the destinations variable by shippper config files and
control or spec files.</para>

<para>The -v option makes <application>shipper</application> chatty
about what it's doing.  The -h option prints a usage message and
exits.</para>

</refsect1>

<refsect1><title>Hints and Tips</title>
<para>The following variable definition in your makefile will ensure
that the makefile version is derived from (and thus always consistent
with) the specfile version.</para>

<programlisting>
VERS=$(shell sed &lt;*.spec control -n -e '/Version: \(.*\)/s//\1/p')
</programlisting>

<para>A makefile production like the following will allow
you to type <command>make release</command> and be sure that all
the deliverables <application>shipper</application> knows about
will be rebuilt before being shipped.</para>

<programlisting>
release: <emphasis>package</emphasis>-$(VERS).tar.gz <emphasis>package</emphasis>.html 
	shipper -u -m -t
</programlisting>

<para>You will want to change <emphasis>package</emphasis> to your 
project name.</para>
</refsect1>

<refsect1><title>Bugs</title>
<para>The program can put downloadables in place on SourceForge, but not set
the "Preferred Download". Usually this will point to the most recent download
subdirectory by default, which is the right thing.</para>
</refsect1>

<refsect1><title>Author</title>
<para>Eric S. Raymond <email>esr@thyrsus.com</email>.</para>

<para>There is a project web page at
<ulink
url="http://www.catb.org/~esr/shipper/">http://www.catb.org/~esr/shipper/</ulink>.</para>
</refsect1>

<refsect1><title>Changes from previous versions</title>

<para>In late 2011 freshmeat.net changed its name to freecode.net.
For backward compatibility, Freshmeat-Name is accepted as a synonym
for Freecode-Name.</para>

<para>Support for the hardwired "berlios" destination has been removed, 
as Berlios is shutting down on 31 Dec 2011.</para>

<para>Support for LSM files and shipping to the ibiblio submissions
directory has been removed, as that portion of its archives is now
mainly historical and no longer used for distribution (the last index
compilation was in 2007). Also, the "redhat" public destination is gone, 
as they no longer accept RPM submissions.</para>

<para>Trying to deduce a default whoami gave bad results and has been
abandoned.</para>

<para>The old variable <varname>subversion_tag_template</varname> is now
<varname>tag_template</varname>.</para>

<para>The <varname>keywords</varname> variable is gone along with LSM
support.</para>

<para>The tool no longer tries to build RPMs itself, but still 
ships them if present. </para>

<para>It is no longer default behavior to build and ship a web page,
or to tag after shipping.</para>
</refsect1>

<refsect1><title>See Also</title>

<para>
<citerefentry>
<refentrytitle>freecode-submit</refentrytitle>
<manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>lftp</refentrytitle>
<manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>scp</refentrytitle>
<manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>ssh</refentrytitle>
<manvolnum>1</manvolnum>
</citerefentry>.</para>
</refsect1>
</refentry>

<!--
Local Variables:
compile-command: "make shipper.html"
End:
-->
