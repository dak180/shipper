#!/usr/bin/env python
#
# shipper -- a tool for shipping software
#
# Requires Python 2.72 or later.

import sys, os, re, commands, time, tempfile, filecmp, shutil
import glob, optparse, stat, email, smtplib

version = "0.14"

#
# State variables
#
# Note: When you add a variable to this set, be sure also to tweak
# the state-dumping code.
#
destinations = []	# List of remote directories to update
whoami = None		# Who am I? (Used for FTP logins and mail signatures)
date = None		# User has not yet set a date
package = None   	# Nor a package name
website = None		# Nor a home page
project_tags = None  	# Keywords for tagging
freecode_name = None	# Name of the project on Freecode
savannah_id = None      # User ID to use for CVS on Savannah
savannah_name = None	# Name of the project on savannah.org (non-gnu)
gitorious_url = None    # Name of the project on gitorious
sourceforge_name = None # Name of the project on sourceforge.net
sourceforge_folder = "" # Subfolder for file releases 
summary = None   	# One-line summary of the package
webdir = None           # Web directory to be mirrored to a project site
logo = ""               # Project logo
#Stuff after this point is multiline
description = None	# Multiline a description
changelog = None	# Project changelog
lastchange = None  	# Last entry in changelog
extralines = ""         # Extra lines for HTML template

# Policy choices
tag_template = "%s"
tag_message = "Tagged for external release %s"

indextemplate = """
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'
    'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
<html>
<head>
<meta name='description' content='Resource page for %(package)s' />
<meta name='generator' content='shipper' />
<meta name='MSSmartTagsPreventParsing' content='TRUE' />
<meta name='description' content="%(summary)s"/>
<title>Resource page for %(package)s %(version)s</title>
</head>
<body>

<table width='100%%' cellpadding='0' summary='Canned page header' bgcolor='#ddd'>
<tr>
<td><h2>Resource page for %(package)s %(version)s</h2></td>
<td align="center">%(centertext)s</td>
<td align='right'><h2>%(date)s</h2></td>
</tr>
</table>


<h1>Resource page for %(package)s %(version)s</td></h1>

%(description)s

<br />
%(resourcetable)s
<br />

%(extralines)s

<p>Last modified %(date)s.</p>

</div>
</body>
</html>
"""

mailtemplate = """Subject: Announcing release %(version)s of %(package)s

Release %(version)s of %(package)s is now available at:

	%(website)s

Here are the most recent changes:

%(lastchange)s
--
                             shipper, acting for %(whoami)s
"""

# It's unpleasant that we have to include these here, but
# the new API doesn't have any facility that allow us to
# validate these.
freecode_focus_types = (
"N/A",
"Initial freecode announcement",
"Documentation",
"Code cleanup",
"Minor feature enhancements",
"Major feature enhancements",
"Minor bugfixes",
"Major bugfixes",
"Minor security fixes",
"Major security fixes",
)

def croak(msg):
    sys.stderr.write("shipper: " + msg + "\n")
    sys.exit(1)

#
# Shipping methods
#

def do_or_die(cmd):
    "Either execute a command or fail noisily, letting output go to stdout."
    if options.verbose:
        print("***" + cmd)
    if os.system(cmd):
        croak("command '%s' failed!" % cmd)

def trap_or_die(cmd):
    "Either execute a command or fail noisily, capturing output."
    if options.verbose:
        print("***", cmd)
    (status, output) =  commands.getstatusoutput(cmd)
    if status:
        croak("command '%s' failed!" % cmd)
    else:
        return output

def upload_or_die(cmd):
    if options.upload:
        do_or_die(cmd)
    else:
        print(cmd)

def upload(dest, files, subdir=None):
    "Upload a file via ftp or scp."
    if subdir == None:
        subdir = package
    print("# Uploading to %s" % dest)
    files = [x for x in files if os.path.exists(x)]
    if dest.startswith("ftp://"):
        dest = dest[6:].split("/")
        host = dest.pop(0)
        directory = "/".join(dest)
        upcmds = ["lftp\n", "open -u anonymous," + myaddress + " " + host + "\n"]
        if directory:
            upcmds.append("cd " + directory + "\n")
        upcmds.append("mput " + " ".join(files) + "\n")
        upcmds.append("close\n")
        if options.upload:
            pfp = os.popen(upcmds.pop(0), "w")
            pfp.writelines(upcmds)
            pfp.close()
        else:
            print("".join(upcmds))
    elif dest.find(":") > -1:
        (host, directory) = dest.split(":")
        for fn in files:
            # Requires your files to be writeable by you - maybe not so if they
            # were RCSed but not locked! If they are, the -p option to scp
            # will set that permission on the remote host and allow you to
            # update the files with scp later.
            remote = os.path.join(directory, subdir, os.path.basename(fn))
            upload_or_die("scp -p " + fn + " " + host + ":" + remote)
    else:
        sys.stderr.write("Don't know what to do with destination %s!\n" % dest)

def freecode_ship(job_card):
    "Ship a specified update to freecode."
    if options.upload:
        upload_or_die("freecode-submit <" + job_card)
    print("Announcing to freecode <<EOF")
    sys.stdout.write(open(job_card).read())
    print("EOF")

def make_index_page(deliverables, substitutions):
    "Make index page, listing specified deliverables."
    print("# Building index.html...")
    global extralines
    resourcetable = '<table border="1" align="center" summary="Downloadable resources">\n'
    for (ifile, explanation, __tag, big) in deliverables:
        if big:
            indurl = download
        else:
            indurl = website
        indurl = os.path.join(indurl, ifile)
        resourcetable += "<tr><td><a href='%s'>%s</a></td><td>%s</td></tr>\n" % (indurl, ifile, explanation)
    resourcetable += "</table>"
    if gitorious_url:
        extralines += "<p>The project is hosted on <a href='%s'>gitorious</a>.</p>\n" % \
                      gitorious_url
    # Handle the old name of freecode.com for backwards compatibility.
    if 'freecode' in destinations or 'freshmeat' in destinations:
        extralines += "<p>There is a Freecode <a href='http://freecode.com/projects/%s'>%s page</a>.</p>\n" % \
                      (freecode_name, freecode_name)
    centertext = ""
    if "logo" in substitutions and substitutions["logo"]:
        centertext = '<img src="%s"/>' % substitutions["logo"]
    substitutions["description"] = "<p>" + substitutions["description"].replace("\n\n", "</p>\n\n<p>") + "</p>"
    substitutions.update(locals())
    # OK, now build the index page itself
    ofp = open("index.html", "w")
    ofp.write(indextemplate % substitutions)
    ofp.close()

#
# Metadata extraction
#

def grep(regexp, fp):
    "Mine for a specified regexp in a file."
    # Note: this blank-strips its output!
    fp = open(fp)
    try:
        while True:
            line = fp.readline()
            if not line:
                return None
            m = re.search(regexp, line)
            if m:
                return m.group(1).strip()
    finally:
        fp.close()
    return None

class Specfile:
    def __init__(self, filename):
        self.filename = filename
        self.type = None
        if filename.endswith(".spec"):
            self.type = "RPM"
            self.package = self.extract("Name")
            self.version = self.extract("Version")
            self.website = self.extract("URL")
            self.summary = self.extract("Summary")
            self.description = self.rpm_get_multiline("description")
            last = ""
            state = 0
            for line in open(self.filename):
                if state == 0:
                    if line.startswith("%changelog"):
                        state = 1
                        continue
                elif state == 1:
                    # Skip first line of entry
                    state = 2
                    continue
                elif state == 2:
                    if not line.strip():
                        break
                    else:
                        if line.strip().startswith("-"):
                            line = line.lstrip()[1:]
                        last += line
            if last:
                self.lastchange = last
            else:
                self.lastchange = None
        elif filename == "control":
            self.type = "deb"
            self.package = self.extract("Package")
            self.version = self.extract("Version")
            if self.version and "-" in self.version:
                self.version = self.version.split("-")[0]
            self.website = self.extract("Homepage")
            self.summary = self.extract("Description")
            fp = open(self.filename)
            desc = ""
            gather = False
            while True:
                line = fp.readline()
                if not line:
                    break
                if line.startswith("Description:"):
                    gather = True
                    continue
                elif not line.strip():
                    gather = False
                if gather:
                    if line == " .\n":
                        line = "\n"
                    else:
                        line = line[1:]
                    desc += line
            fp.close()
            if desc:
                self.description = desc.strip() + "\n"
            else:
                self.description = None
            self.lastchange = None
    def extract(self, fld):
        "Extract a one-line field, possibly embedded as a magic comment."
        if self.type == "RPM":
            return grep("^#?"+fld+":\s*(.*)", self.filename)
        elif self.type == "deb":
            return grep("^(?:XBS-)?"+fld+": (.*)", self.filename)
    def rpm_get_multiline(self, fieldname):
        "Grab everything from leader line to just before the next leader line."
        fp = open(self.filename)
        data = ""
        gather = False
        while True:
            line = fp.readline()
            if not line:
                break
            # Pick up fieldnames *without* translation options.
            if line.strip() == "%" + fieldname:
                gather = True
                continue
            elif line[0] == "%":
                gather = False
            if gather:
                data += line
        fp.close()
        if data:
            return data.strip() + "\n"
        else:
            return None
#
# Who am I? 
#
def whoami_really():
    "Ask various programs that keep track of who you are who you are."
    # Bazaar version-control system
    (bzrerr, bzrout) = commands.getstatusoutput("bzr config email")
    if bzrerr == 0 and bzrout:
        return bzrout
    # Git version-control system
    (nameerr, nameout) = commands.getstatusoutput("git config user.name")
    (emailerr, emailout) = commands.getstatusoutput("git config user.email")
    if nameerr == 0 and nameout and emailerr == 0 and emailout:
        return "%s <%s>" % (nameout, emailout)
    # Various random configs
    for (fn, mine) in (
        ("~/.hgrc", r"username\s*=\s*(.*)"),                # Mercurial
        ("~/.lynxrc", r"personal_mail_address\s*=\s*(.*)")  # Lynx
        ):
        fn = os.path.expanduser(fn)
        if os.path.exists(fn):
            for line in file(fn):
                m = re.search(mine, line)
                if m:
                    return m.group(1)
    # Out of alternatives
    return None

#
# Main sequence
#

try:
    #
    # Process options
    #

    parser = optparse.OptionParser(usage="%prog: [-u] [-f] [-v]")
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=False,
                      help="print progress messages to stdout")
    parser.add_option("-u", "--upload",
                      action="store_true", dest="upload", default=False,
                      help="do uploads")
    parser.add_option("-n", "--nobuild",
                      action="store_true", dest="nobuild", default=False,
                      help="dump configuration only, no builds or uploads")
    parser.add_option("-m", "--makeindex",
                      action="store_true", dest="makeindex", default=False,
                      help="generate an index.html for websites")
    parser.add_option("-t", "--tag",
                      action="store_true", dest="vcstag", default=False,
                      help="tag repo for external release after shipping")
    parser.add_option("-x", "--exclude",
                      dest="excluded", default="",
                      help="exclude some shipping targets")
    parser.add_option("-w", "--web-only",
                      action="store_true", dest="webonly", default=False,
                      help="do webspace update only")
    (options, args) = parser.parse_args()

    #
    # Extract metadata and compute control information
    #

    def disable(s):
        destinations.remove(s)

    # Security check, don't let an attacker elevate privileges 
    def securecheck(fn):
        if stat.S_IMODE(os.stat(fn).st_mode) & 0o0002:
            croak("%s must not be world-writeable!" % fn)

    # Read in variable overrides
    securecheck(".")
    home_profile = os.path.join(os.getenv('HOME'), ".shipper")
    if os.path.exists(home_profile):
        securecheck(home_profile)
        exec(compile(open(home_profile).read(), home_profile, 'exec'))
    here_profile = ".shipper"
    if os.path.exists(here_profile):
        securecheck(here_profile)
        exec(compile(open(here_profile).read(), here_profile, 'exec'))

    # Set various sensible defaults
    if not whoami:
        whoami = whoami_really()
    if not whoami:
        croak("please set whoami in your .shipper file.")
    (myrealname, myaddress) = email.utils.parseaddr(whoami)
    (myuserid, myhost) = myaddress.split("@")

    # Where to get the metadata
    specfiles = glob.glob("*.spec")
    if len(specfiles) == 1:
        metadata = Specfile(specfiles[0])
    elif os.path.exists("control"):
        metadata = Specfile("control")
    else:
        croak("must be exactly one RPM or dpkg control file in the directory!")

    # Get the package name
    if not package:
        package = metadata.package
    if not package:
        croak("can't get package name!")

    # Extract the package version from the specfile or Makefile
    makevers = None
    makefile = None
    if os.path.exists("Makefile"):
        makefile = "Makefile"        
    if os.path.exists("makefile"):
        makefile = "makefile"
    if makefile:
        makevers = grep("^VERS[A-Z]* *= *(.*)", makefile)
        # Maybe it's a shell command intended to extract version from specfile
        if makevers and makevers[0] == '$':
            makevers = commands.getoutput(makevers[7:-1])
        if makevers[0] == '"' and makevers[-1] == '"':
            makevers = makevers[1:-1]
    if os.path.exists("SConstruct"):
        makevers = grep('version *= "*(.*)"', "SConstruct")
    if makevers and metadata.version and metadata.version != makevers:
        croak("specfile version %s != Makefile version %s" % (metadata.version, makevers))
    else:
        version = makevers or metadata.version
    if version == None:
        croak("can't get package version")
    elif version[0] not in "0123456789":
        croak("package version %s appears garbled" % version)

    # Specfiles may set their own destinations
    local_destinations = metadata.extract("Destinations")
    if local_destinations:
        local_destinations = [x.strip() for x in local_destinations.split(",")]
        negations = [s for s in local_destinations if s.startswith("~")]
        local_destinations = [s for s in local_destinations if not s.startswith("~")]
        if "~" in negations:
            destinations = local_destinations
        else:
            destinations += local_destinations
            for removable in [s[1:] for s in negations]:
                if removable in destinations:
                    destinations.remove(removable)

    # Hack the destinations variable if need be, might mean we can avoid some
    # builds.
    if options.excluded:
        for excludee in options.excluded.split(","):
            if excludee in destinations:
                destinations.remove(excludee)
            else:
                sys.stderr.write("shipper: %s isn't in the destinations!\n" % excludee)
                raise SystemExit(1)

    print("# Uploading version %s of %s" % (version, package))

    # Extract remaining variables for templating
    # Note: When you add a variable here,
    # don't forget to update the dump code down below.
    if not website:
        website = metadata.website
    if not date:
        date = time.asctime()
    if not summary:
        summary = metadata.summary
    if not description:
        description = metadata.description
    if not project_tags:
        project_tags = metadata.extract("Project-Tag-List")
    freecode_name = metadata.extract("Freecode-Name")
    if not freecode_name:
        freecode_name = metadata.extract("Freshmeat-Name")
    if not freecode_name:
        freecode_name = package
    savannah_name = metadata.extract("Savannah-Name")
    if not savannah_name:
        savannah_name = package
    sourceforge_name = metadata.extract("SourceForge-Name")
    if sourceforge_name:
        if "@" in sourceforge_name:
            (sourceforge_userid, sourceforge_name) = sourceforge_name.split("@")
    else:
        sourceforge_name = package
        sourceforge_userid = myuserid
    sourceforge_folder = metadata.extract("SourceForge-Folder")
    gitorious_url = metadata.extract("Gitorious-URL")
    logo = metadata.extract("Logo")
    webdir = metadata.extract("Web-Directory")
    resourcetable = ""

    if options.verbose:
        print "shipper: variable extraction finished"

    # Finally, derive the lastchange entry; we'll need it for
    # freecode.com
    lastchange = None
    for filename in ("NEWS", "HISTORY", "ChangeLog"):
        if not lastchange and os.path.exists(filename):
            if options.verbose:
                print("shipper: I see a %s file" % filename)
            state = 0
            for line in open(filename, "r"):
                if state == 0:       # Skipping header
                    if line.startswith(" ") or line.startswith("\t"):
                        continue
                    elif not line.strip():
                        continue
                    else:
                        # Skip first line in the log entry.
                        lastchange = ""
                        state = 1
                elif state == 1:     # Past header
                    if not line.strip():
                        break
                    else:
                        lastchange += line
    if not lastchange and metadata.lastchange:
        lastchange = metadata.lastchange
    if 'freecode' in destinations and not lastchange:
        croak("Freecode notification requires a NEWS, HISTORY or ChangeLog file.")

    # Some destinations imply website locations
    if not website:
        if "sourceforge" in destinations:
            website = "http://%s.sourceforge.net/" % sourceforge_name
        if "savannah" in destinations:
            website = "http://www.nongnu.org/%s/" % savannah_name

    # Download directory has to be computed differently at
    # special destinations.
    if website:
        if "savannah" in website:
            download = "http://download.savannah.nongnu.org/releases/%s/"+(savannah_name or package)
        elif "sourceforge" in website:
            download = "http://sourceforge.net/projects/%s/files/" % (
                sourceforge_name)
            if sourceforge_folder:
                download += sourceforge_folder + '/'
        else:
            download = website 

    #
    # Now compute the names of deliverables
    #
    def versioned(fn):
        "Does the specified filename contain a version number?"
        return re.search("[0-9]", fn)

    if options.verbose:
        print("shipper: starting deliverables computation")

    # Stuff not included here: SHIPPER.EMAIL, SHIPPER.FREECODE.
    deliverable_types = (
        (re.compile("^README$"),
         "roadmap file",
         None,
         False),
        (re.compile("^READ.ME$"),
         "roadmap file",
         None,
         False),
        (re.compile("^ChangeLog$"),
         "change log",
         "ChangeLog",
         False),
        (re.compile("^NEWS$"),
         "project news",
         None,
         False),
        (re.compile("^HISTORY$"),
         "project history",
         None,
         False),
        (re.compile("^BUGS$"),
         "known bugs",
         None,
         False),
        (re.compile("^TODO$"),
         "to-do file",
         None,
         False),
        (re.compile("^COPYING$"),
         "project license",
         None,
         False),
        (re.compile(".*-" + version + r".(tar.gz|tgz)$"),
         "gzipped source tarball",
         "Tar/GZ",
         True),
        (re.compile(package + ".*-" + version + r".tar.bz2$"),
         "bzipped source tarball",
         "Tar/BZ",
         True),
        (re.compile(package + ".*-" + version + r".zip$"),
         "zip archive",
         "Zip",
         True),
        (re.compile(package + ".*-" + version + r"-.*\.src.rpm$"),
         "source RPM",
         "SRPM-Package",
         True),
        (re.compile(package + ".*-" + version + r"-.*\.rpm$"),
         "binary RPM",
         "RPM-Package",
         True),
        (re.compile(package + ".*-" + version + r"-.*\.deb$"),
         "Debian package",
         "Debian-Package",
         True),
        )
    deliverables = []
    for filename in os.listdir("."):
        for (regexp, explanation, tag, bulky) in deliverable_types: 
            if regexp.search(filename):
                if not bulky:
                    with open(filename) as fp:
                        if re.search("^shipper: ignore this", fp.read()):
                            continue
                deliverables.append((filename, explanation, tag, bulky))
    if options.verbose:
        print("Deliverables:" + " ".join([x[0] for x in deliverables]))

    #
    # Might be time to dump
    #
    if options.nobuild:
        # Single-line 
        for variable in ('destinations', 'whoami', 'date', 
                         'package', 'website', 'project_tags', 
                         'freecode_name', 'savannah_id', 'savannah_name',
                         'gitorious_url',
                         'sourceforge_name', 'sourceforge_folder',
                         'summary', 'webdir', 'logo',
                         'tag_template', 'tag_message'):
            print("%s = %s" % (variable, repr(eval(variable))))
        # Free text, multiline
        for variable in ('description', 'changelog', 'lastchange',
                         'extralines', 'mailtemplate', 'indextemplate'):
            if not eval(variable):
                print("No %s" % variable)
            else:
                print("%s = <<EOF\n%sEOF" % (variable, eval(variable)))
        raise SystemExit(0)
    #
    # Build deliverables
    #

    # Sanity checks
    if not destinations:
        croak("the Destinations list is empty; nothing to do.")
    if not options.webonly and not [f_e_t_b[0] for f_e_t_b in deliverables if versioned(f_e_t_b[0])]:
        croak("no deliverables with versions!")

    if options.verbose:
        print("shipper: sanity checks passed")

    if not webdir:
        # Compute web-related deliverables, we need this even if not rebuilding
        # the index. Includes anything with an HTML, Javascript, or CSS
        # extension.
        for filename in glob.glob('*.html')+glob.glob('*.xhtml')+glob.glob('*.js')+glob.glob('*.css'):
            if filename == 'index.html':
                continue
            stem = filename[:-4]
            for ext in ("man", "1", "2", "3", "4", "5", "6", "7", "8", "9", "xml"):
                if os.path.exists(stem + ext):
                    explanation = "HTML rendering of " + stem + ext
                    break
            else:
                explanation = "HTML page."
            deliverables.append((filename, explanation, None, False))

        # If a web page doesn't already exist, but the index template
        # variable is nonempty (which is the default) make one.  
        if indextemplate and options.makeindex:
            make_index_page(deliverables, globals())
            # Now that the web page has been generated, it can add
            # itself to the deliverables without having it show up in
            # the resource table.
            deliverables.append(("index.html", "index web page", None, False))

        # We'll want the logo if it exists, too
        if logo:
            deliverables.append((logo, "project logo", None, False))

    # The freecode announcement
    if not options.webonly and 'freecode' in destinations and not os.path.exists("SHIPPER.FREECODE"):
        print("# Building SHIPPER.FREECODE...")
        if not website:
            print("# Can't announce to freecode without a primary website!")
            destinations.remove("freecode")
        elif not lastchange:
            print("# Can't announce to freecode without a changes field!")
            destinations.remove("freecode")
        else:
            while True:
                focus = raw_input("# freecode.com release focus (? for list): ")
                if focus == '?':
                    i = 0
                    for f in freecode_focus_types:
                        print("%d: %s" % (i, f))
                        i += 1
                elif focus in "0123456789":
                    focus = freecode_focus_types[int(focus)]
                    print("# OK: " + focus)
                    break
                elif focus.lower() in [x.lower() for x in freecode_focus_types]:
                    break
                else:
                    croak("not a valid freecode.com release focus!")
            ofp = open("SHIPPER.FREECODE", "w")
            ofp.write("Project: %s\n" % (freecode_name or package))
            ofp.write("Version: %s\n" % version)            
            ofp.write("Description: %s" % description.replace("\n", "\n    ")[:-4])
            if project_tags:
                ofp.write("Project-Tag-List: %s\n" % project_tags)
            ofp.write("Release-Focus: %s\n" % focus)
            ofp.write("Website-URL: %s\n" % website)
            for (f, e, s, b) in deliverables:
                if s:
                    if b:
                        url = download
                    else:
                        url = website
                    url = os.path.join(url, f)
                    ofp.write("%s-URL: %s\n" % (s, url))
            # freecode.com doesn't like bulleted entries.
            freecodelog = [s.lstrip() for s in lastchange.split("\n")]
            ofp.write("\n" + "\n".join(freecodelog))
            ofp.close()

    # Finally, email notification
    maildests = [x for x in destinations if x.startswith("mailto:")]
    if maildests and not os.path.exists("SHIPPER.EMAIL"):
        print("# Building SHIPPER.EMAIL...")
        ofp = open("SHIPPER.EMAIL", "w")
        ofp.write("To: " + ", ".join([x[7:] for x in maildests]) + "\n")
        ofp.write(mailtemplate % globals())
        ofp.close()

    #
    # Now actually ship
    #

    # Compute final deliverables.  This computation needs to coincide
    # with the way web deliverables are distinguished from download
    # deliverables in make_index_page(), otherwise havoc will ensue.
    all_deliverables = [x[0] for x in deliverables]
    download_deliverables = [x[0] for x in [f_e_s_b for f_e_s_b in deliverables if f_e_s_b[3]]]
    web_deliverables = [x[0] for x in [f_e_s_b1 for f_e_s_b1 in deliverables if not f_e_s_b1[3]]]

    # Shipping methods for public destinations.
    def freecode():
        freecode_ship("SHIPPER.FREECODE")
    def savannah():
        if not options.webonly:
            upload("dl.sv.nongnu.org:/releases/%s/" % savannah_name,
                   download_deliverables)
        # See http://savannah.gnu.org/maintenance/HomepageUpload
        tmpdir = tempfile.mkdtemp()
        upload_or_die("cd %s; CVS_RSH=ssh cvs -z3 -d:ext:%s@cvs.sv.gnu.org:/web/%s co %s" \
                  % (tmpdir, savannah_id, savannah_name, savannah_name))
        # Using -kb to avoid keyword expansion on binary files.
        if not webdir:
            deliver = " ".join(web_deliverables)
        else:
            deliver = []
            for path, dirs, files in os.walk(webdir):
                for fn in files:
                    deliver.append(os.path.join(path, fn))
        #print("Ready to ship %s" % deliver)
        for source in deliver:
            print "Path", source
            dirparts = source.split(os.sep)
            for i in range(1, len(dirparts)):
                source_subdir = os.sep.join(dirparts[:i])
                target_subdir = os.path.join(tmpdir,
                                             savannah_name,
                                             source_subdir)
                if not os.path.isdir(target_subdir):
                    if not os.path.exists(target_subdir):
                        os.mkdir(target_subdir)
                    else:
                        sys.stderr("%s already exists as non-directory!" % \
                                   target_subdir)
                        raise SystemExit,1
            target = os.path.join(tmpdir, savannah_name, source)
            pre_existing = os.path.exists(target)
            shutil.copyfile(source, target)
            if not pre_existing:
                upload_or_die("cd %s/%s; ls -R; cvs add -kb %s"
                               % (tmpdir, savannah_name, source))
        # cvs commit goes here
    def sourceforge():
        if not options.webonly:
            # See https://sourceforge.net/apps/trac/sourceforge/wiki/Release%20files%20for%20download
            destdir =  "/home/frs/project/%s" % sourceforge_name
            if sourceforge_folder:
                destdir += "/" + sourceforge_folder
            upload_or_die("rsync -avP -e ssh %s '%s,%s@frs.sourceforge.net:%s'" % (
                " ".join(download_deliverables),
                sourceforge_userid,
                sourceforge_name,
                destdir))
        if webdir:
            websources = webdir + '/'
        else:
            websources = " ".join(web_deliverables),
        # https://sourceforge.net/apps/trac/sourceforge/wiki/Rsync%20over%20SSH
        upload_or_die("rsync -aiv %s %s,%s@web.sourceforge.net:/home/project-web/%s/htdocs/" % (
            websources,
            sourceforge_userid,
            sourceforge_name,
            sourceforge_name))
    hardwired = ("freecode", "savannah", "sourceforge")

    if options.verbose:
        print("Destinations: " + ", ".join(destinations))

    # OK, ship everything.  First, the non-mail destinations
    for destination in [d for d in destinations if not d.startswith("mailto:")]:
        if destination in hardwired:
            if destination == 'freecode' and options.webonly:
                continue
            print("# Shipping to public destination %s" % destination)
            eval(destination + "()")
        elif destination.startswith("ftp:"):
            if not options.webonly:
                upload(destination, download_deliverables)
        elif destination not in hardwired:
            if options.webonly:
                upload(destination, web_deliverables)
            else:
                upload(destination, all_deliverables)

    if not options.webonly:
        mailaddrs = [d for d in destinations if d.startswith("mailto:")]
        if mailaddrs:
            mailaddrs = [a[8:] for a in mailaddrs]
            print("# Mailing to %s" % ", ".join(mailaddrs))
            content = open("SHIPPER.EMAIL").read()
            if options.upload:
                server = smtplib.SMTP('localhost')
                server.sendmail(whoami, mailaddrs, content)
                server.quit()
            else:
                print("mail %s <<EOF" % ", ".join(mailaddrs))
                print(content)
                print("EOF")

        # Shipping has succeeded.
        if options.vcstag and tag_template and tag_message:
            tagname = tag_template % version
            tag_message = tag_message % version

            # If we're in the trunk of an SVN repository, we want to tag
            # what just got shipped as an external release.
            if os.path.basename(os.getcwd())=='trunk' and os.path.exists(".svn"):
                print("# This is a Subversion trunk directory...")
                if os.path.exists("../tags"):
                    print("# I see an svn peer tags directory...")
                    if os.path.exists("../tags/" + tagname):
                        print("# This release has aleady been tagged.")
                    else:
                        print("# I will copy and tag this release as %s." % tagname)
                        upload_or_die("cd .. && svn copy trunk tags/%s && svn -m '%s' commit" % (tagname, tag_message))
            for (idir, what, cmnd) in (
                (".git", "git", "git tag -a %(tagname)s -m '%(tag_message)s'"),
                (".hg",  "hg",  "hg tag %(tagname)s -m '%(tag_message)s'"),
                (".bzr", "bzr", "bzr tag %(tagname)s"),
                ):
                if os.path.exists(idir):
                    print("# I will %s-tag this release as %s." % (what, tagname))
                    upload_or_die(cmnd % globals())
            if gitorious_url:
                print("# Don't forget to push to the gitorious repo.")
    print("# Done")
except KeyboardInterrupt:
    print("# Bye!")

# The following sets edit modes for GNU EMACS
# Local Variables:
# mode:python
# End:
